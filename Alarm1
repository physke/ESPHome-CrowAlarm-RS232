esphome:
  name: alarm1
  friendly_name: Alarm1
  on_boot:
  - priority: 200
    then:
    - uart.write: "?\n"

#esp8266:
#  board: d1_mini


esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

# Enable logging
logger:
#  level: VERBOSE #makes uart stream available in esphome logstream
#  baud_rate: 0 #disable logging over uart

# Enable Home Assistant API
api:
  encryption:
    key: "**********************************"

ota:
  - platform: esphome
    password: "******************************"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  #ap:
  #  ssid: "Alarm1 Fallback Hotspot"
  #  password: "9srvH2PYfzoX"
  
web_server:
  port: 80

captive_portal:


# Set up the UART component
uart:
 id: uart_bus
 #tx_pin: GPIO1  # TX pin (D10)
 #rx_pin: GPIO3  # RX pin (D9)
 tx_pin: GPIO39
 rx_pin: GPIO37
 baud_rate: 9600
 debug:
  direction: RX
  dummy_receiver: true
  after:
   delimiter: "\n"
  sequence:
    - lambda: |-
        UARTDebug::log_string(direction, bytes);
        std::string str(bytes.begin(), bytes.end());

        //watch for potential problems with non printable or special characters in string
        id(rawString).publish_state(str.c_str());

        if (id(rawString).state.find("EAA") != std::string::npos) {
         id(alarm1_status).publish_state("Arming");
        }else if (id(rawString).state.find("DA") != std::string::npos) {
         id(alarm1_status).publish_state("Disarmed");
        }else if (id(rawString).state.find("AA") != std::string::npos) {
         id(alarm1_status).publish_state("Armed");
        }
        if (id(rawString).state.find("ZO001") != std::string::npos || id(rawString).state.find("ZA001") != std::string::npos) {
         id(alarm1_zone1).publish_state(true);
        }else if (id(rawString).state.find("ZC001") != std::string::npos || id(rawString).state.find("ZR001") != std::string::npos) {
         id(alarm1_zone1).publish_state(false);
        }
        if (id(rawString).state.find("ZO002") != std::string::npos || id(rawString).state.find("ZA002") != std::string::npos) {
         id(alarm1_zone2).publish_state(true);
        }else if (id(rawString).state.find("ZC002") != std::string::npos || id(rawString).state.find("ZR002") != std::string::npos) {
         id(alarm1_zone2).publish_state(false);
        }
        if (id(rawString).state.find("ZO003") != std::string::npos || id(rawString).state.find("ZA003") != std::string::npos) {
         id(alarm1_zone3).publish_state(true);
        }else if (id(rawString).state.find("ZC003") != std::string::npos || id(rawString).state.find("ZR003") != std::string::npos) {
         id(alarm1_zone3).publish_state(false);
        }
        if (id(rawString).state.find("ZO004") != std::string::npos || id(rawString).state.find("ZA004") != std::string::npos) {
         id(alarm1_zone4).publish_state(true);
        }else if (id(rawString).state.find("ZC004") != std::string::npos || id(rawString).state.find("ZR004") != std::string::npos) {
         id(alarm1_zone4).publish_state(false);
        }
        if (id(rawString).state.find("ZO005") != std::string::npos || id(rawString).state.find("ZA005") != std::string::npos) {
         id(alarm1_zone5).publish_state(true);
        }else if (id(rawString).state.find("ZC005") != std::string::npos || id(rawString).state.find("ZR005") != std::string::npos) {
         id(alarm1_zone5).publish_state(false);
        }
        if (id(rawString).state.find("ZO006") != std::string::npos || id(rawString).state.find("ZA006") != std::string::npos) {
         id(alarm1_zone6).publish_state(true);
        }else if (id(rawString).state.find("ZC006") != std::string::npos || id(rawString).state.find("ZR006") != std::string::npos) {
         id(alarm1_zone6).publish_state(false);
        }
        if (id(rawString).state.find("ZO007") != std::string::npos || id(rawString).state.find("ZA007") != std::string::npos) {
         id(alarm1_zone7).publish_state(true);
        }else if (id(rawString).state.find("ZC007") != std::string::npos || id(rawString).state.find("ZR007") != std::string::npos) {
         id(alarm1_zone7).publish_state(false);
        }
        if (id(rawString).state.find("ZO008") != std::string::npos || id(rawString).state.find("ZA008") != std::string::npos) {
         id(alarm1_zone8).publish_state(true);
        }else if (id(rawString).state.find("ZC008") != std::string::npos || id(rawString).state.find("ZR008") != std::string::npos) {
         id(alarm1_zone8).publish_state(false);
        }
        if (id(rawString).state.find("OO001") != std::string::npos) {
         id(alarm1_status).publish_state("Triggered");
         id(alarm1_output1).publish_state(true);
        }else if (id(rawString).state.find("OR001") != std::string::npos) {
         id(alarm1_output1).publish_state(false);
        }
        if (id(rawString).state.find("OO002") != std::string::npos) {
         id(alarm1_status).publish_state("Triggered");
         id(alarm1_output2).publish_state(true);
        }else if (id(rawString).state.find("OR002") != std::string::npos) {
         id(alarm1_output2).publish_state(false);
        }
        if (id(rawString).state.find("ZA") != std::string::npos) {
         id(alarm1_status).publish_state("Triggered");
        }
        if (id(rawString).state.find("ZR") != std::string::npos) {
         id(updatestatus).press();
        }
        if (id(rawString).state.find("BF") != std::string::npos) {
         id(alarm1_battery).publish_state(true);
        }else if (id(rawString).state.find("BR") != std::string::npos) {
         id(alarm1_battery).publish_state(false);
        }
        if (id(rawString).state.find("NR") != std::string::npos) {
         id(alarm1_ready).publish_state(true);
        }else if (id(rawString).state.find("RO") != std::string::npos) {
         id(alarm1_ready).publish_state(false);
        }
        if (id(rawString).state.find("MR") != std::string::npos) {
         id(alarm1_mains).publish_state(true);
        }else if (id(rawString).state.find("MF") != std::string::npos) {
         id(alarm1_mains).publish_state(false);
        }


text_sensor:
 - platform: template
   #name: "Raw String"
   internal: true
   id: "rawString"
 - platform: template
   id: alarm1_status
   name: "Alarm Status"

sensor:

binary_sensor:
 - platform: template
   name: "Z1 - Solar Controller"
   id: alarm1_zone1
   device_class: door
 - platform: template
   name: "Z2 - PA Door 1"
   id: alarm1_zone2
   device_class: door
 - platform: template
   name: "Z3 - Roller Door 1"
   id: alarm1_zone3
   device_class: garage_door
 - platform: template
   name: "Z4 - Roller Door 2"
   id: alarm1_zone4
   device_class: garage_door
 - platform: template
   name: "Z5 - PA Door 2"
   id: alarm1_zone5
   device_class: door
 - platform: template
   name: "Z6 - PA Door 3"
   id: alarm1_zone6
   device_class: door
 - platform: template
   name: "Z7 - Smoke Detector"
   id: alarm1_zone7
   device_class: smoke
 - platform: template
   name: "Z8 - Container Door"
   id: alarm1_zone8
   device_class: door
- platform: template
   name: "Ext Siren"
   id: alarm1_output1
#   device_class: sound
 - platform: template
   name: "Int Siren"
   id: alarm1_output2
#   device_class: sound
 - platform: template
   name: "Ready"
   id: alarm1_ready
   device_class: problem
 - platform: template
   id: alarm1_battery
   name: "Battery"
   device_class: battery
 - platform: template
   id: alarm1_mains
   name: "Mains"
   device_class: power

button:
 - platform: template
   name: "UpdateStatus"
   id: "updatestatus"
   on_press:
    then:
      - uart.write: "?\n"
 - platform: template
   name: "Arm/Disarm"
   on_press:
    then:
      - uart.write: "KEYS_E\n"
      - delay: 500ms
      - uart.write: "KEYS_123E\n"

switch:
  - platform: gpio
    id: container_door
    name: "Container Door"
    pin:
     number: GPIO14
     inverted: true
     mode:
      output: true
      open_drain: true
